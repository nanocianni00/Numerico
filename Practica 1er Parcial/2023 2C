##1-a-

polinomio = function(x) {
cos(x) / x^(1.49)
}

x_values <- seq(12, 32, by = 0.01)  
y_values <- sapply(x_values, polinomio)  

plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
     main = "Gráfica de f(x)",
     xlab = "x", ylab = "f(x)")
abline(h = 0, col = "red", lty = 2)

##b-

Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #cambio == por <=
 p = p1 - q1*(p1-p0)/(q1-q0) #cambio de lugar los parentesis y cambio + por -
 if (abs(p-p1) < TOL){ #cambio q y q1 por p y p1
 return(p)
 }
 i= i + 1
 p0 = p1 #cambio p por p1
 q0 = q1
 p1 = p #cambio p0 por p
 q1 = f(p) #pongo f(p) en vez de f(p0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones'))
}

##c-

f = function(x) {
cos(x) / x^(1.49)
}

Secante(f, 12, 15, 10^(-5), 100)
Secante(f, 16, 19, 10^(-5), 100)
Secante(f, 20, 22, 10^(-5), 100)
Secante(f, 23, 25, 10^(-5), 100)
Secante(f, 26, 30, 10^(-5), 100)

##d-

Secante <- function(f,p0,p1,TOL,N){
i <- 2
q0 <- f(p0)
q1 <- f(p1)
while (i <= N){ #cambio == por <=
 p = p1 - q1*(p1-p0)/(q1-q0) #cambio de lugar los parentesis y cambio + por -
print(paste("Iteración:", i, "p0:", p0, "p1:", p1, "p:", p)) 
if (abs(p-p1) < TOL){ #cambio q y q1 por p y p1
 return(p)
 }
 i= i + 1
 p0 = p1 #cambio p por p1
 q0 = q1
 p1 = p #cambio p0 por p
 q1 = f(p) #pongo f(p) en vez de f(p0)
}
return(paste('El metodo fallo luego de ', N, ' iteraciones'))
}

Secante(f, 17, 20, 10^(-5), 10)

##2-

newton <- function(x, TOL, N = 1000, ecuaciones){
  # x: aproximacion inicial
  # TOL: tolerancia
  # N: cantidad maxima de iteraciones
  
  # n: numero de ecuaciones e incognitas
  n <- length(ecuaciones)
  # funciones valuadas en cero
  f0 <- rep(NA, n)
  jacobiano = matrix(rep(NA, n*n), nrow = n, ncol = n)
  
  for (max_reps in 1:N) {
    # Recorro las filas
    for (i in 1:n) {
      #Evaluo las ecuaciones 
      f0[i] <- eval(ecuaciones[i], x)
      # Recorro las columnas
      for (j in 1:n){
        # Derivo en cada variable y evaluo
        jacobiano[i,j] <- eval((D(ecuaciones[i], glue::glue("x",j))), x)
      }
    }
    
    y0 <- solve(jacobiano) %*% (-f0)
    x <- y0 + unlist(x, use.names=FALSE)
    
    norma <- norm(y0,type = 'M')
    if (norma < TOL) {
      return(x)
    }
    
    x0 <- list()
    for (i in 1:n) {
      x0[glue::glue("x",i)] <- x[i]
    }
    x <- x0
    
  }
  return("Numero de iteraciones maximo excedido")
}

newton(x = list(x1 = 0.1, x2 = 0.1, x3 = -0.1), TOL = 10^(-8),
      ecuaciones = c(
                     expression(6 * x1 - 2 * cos(x2 * x3) - 1),
                     expression(2 * x1^2 - 162 * (x2 + 0.1)^2 + 2 * sin(x3) - 2.12),
                     expression(2 * exp(-x1 * x2) + 40 * x3 - (6 - 20 * pi) / 3)
                     ))
#ya ni se porque pero me tira un error

##3-a-

polinomio <- function(x) { 
  50000 * (1 + x)^5 - 100000
}

x_values <- seq(0.001, 1, by = 0.001)

y_values <- sapply(x_values, polinomio)

plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
     xlab = "Tasa de interés mensual (x)", ylab = "f(x)",
     main = "Gráfico de la función para encontrar la tasa de interés")
abline(h = 0, col = "red", lty = 2)  # Línea horizontal en f(x) = 0
grid()

##b-

raiz_biseccion <- function(a,b,Tol,N){
  i = 1
  FA = polinomio(a)
  while(i<=N){
    p = a + (b-a)/2
    FP = polinomio(p)
    if(FP==0 | (b-a)/2<Tol){
      return(p)
    }
    i = i+1
    if(FP*FA >0){
      a = p
      FA = FP
    } else {
      b = p
    }
  }
  return(paste("El metodo fallo luego de", N, "iteraciones"))
}

polinomio = function(x) { 
50000 * (1 + x)^5 - 100000
}

raiz_biseccion(0.001, 1, 10^(-10), 10000)

##c-

polinomio = function(x) { 
50000 * (1 + x)^2 - 100000
}

raiz_biseccion(0.001, 1, 10^(-10), 10000)

##d-

raiz_biseccion <- function(a, b, Tol, N) {
  i = 1
  FA = polinomio(a)
  
  while (i <= N) {
    p = a + (b - a) / 2
    FP = polinomio(p)
    
    # Línea para imprimir cada iteración
    print(paste("Iteración:", i, "a:", a, "b:", b, "p:", p))
    
    if (FP == 0 | (b - a) / 2 < Tol) {
      return(p)
    }
    
    i = i + 1
    if (FP * FA > 0) {
      a = p
      FA = FP
    } else {
      b = p
    }
  }
  return(paste("El método falló luego de", N, "iteraciones"))
}

polinomio <- function(x) { 
  50000 * (1 + x)^2 - 100000
}

raiz_biseccion(0.001, 1, 10^(-20), 10000)
