##1-a-

newton_raphson = function(p0, TOL,N){
  i = 1
  while(i<=N){
    x = p0
    p = p0- Polinomio_newton(p0)/dfnewton(p0)
    print(p)
    if(abs(p-p0)<TOL){
      return(p)
    }
    i = i+1
    p0 = p
  }
  return(paste("El metodo fallo luego de", N,"iteraciones"))
}

Polinomio_newton = function(x) { 
9 * sin(x) - exp(83/(x^3))
}
dfnewton = function(x) {
9 * cos(x) + 83 * 3 * x^(-4) * exp(83/(x^3))
}

print (newton_raphson(36,10^(-5),100)) #Pruebo con varios valores distintos de p0 dentro del intervalo
print (newton_raphson(38,10^(-5),100))
print (newton_raphson(40,10^(-5),100))
print (newton_raphson(42,10^(-5),100))
print (newton_raphson(44,10^(-5),100))
print (newton_raphson(46,10^(-5),100))


#las raices son 37.81; 40.73; y 44.09

##b-

print (newton_raphson(37,10^(-5),5))

##c-

x_values <- seq(35, 45, by = 0.01)  
y_values <- sapply(x_values, Polinomio_newton)  

plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
     main = "Gráfica de f(x)",
     xlab = "x", ylab = "f(x)")
abline(h = 0, col = "red", lty = 2)  

raices_unicas <- c(37.81, 40.73, 44.09)  # Ejemplo de raíces encontradas

points(raices_unicas, rep(0, length(raices_unicas)), col = c("green", "purple", "orange"), 
       pch = 19, cex = 1.5)


legend("topright", legend = paste("Raíz", 1:length(raices_unicas), ":", round(raices_unicas, 5)),
       col = c("green", "purple", "orange"), pch = 19, cex = 0.8)

##2-a-

f <- function(x){
  (12 + 4 * x^2)^(1/3)
}

#Instancio un vector que me va a indicar los puntos en la función
x <- seq(1, 2, by = 0.01)

#Genero los puntos
fx <- f(x)

#Creo un data frame con los x e y
df <- data.frame(x, fx)

#Instancio los datos
gg_fx <- ggplot(data = df)

#Agrego la capa con los datos
gg_fx <- gg_fx + aes(x = x, y = fx)

#Est grafica una linea
gg_fx <- gg_fx + geom_line(linetype = 1, colour = "darkblue")

# Agregamos la función y = x
gg_fx <- gg_fx + geom_line(aes(x = x, y = x), linetype = 2, colour = "red")

#Agrego el eje X
gg_fx <- gg_fx + geom_vline(xintercept = 0, linetype = 1)

#Agrego el eje Y
gg_fx <- gg_fx + geom_hline(yintercept = 0, linetype = 1)

#Grafico
gg_fx

##b-

puntofijo = function(p0, Tol,N){
#Paso 1  
i = 1
#Paso 2
  while(i <= N){
#Paso 3
    p= polinomio(p0)
#Paso 4
    if(abs(p - p0) < Tol){
      return(p)
    }
#Paso 5
   p0 = p
#Paso 6
    i = i + 1
  }
  return(paste("El metodo fallo luego de ", N, "iteraciones "))
}

##c-

polinomio = function(x) {
(12 + 4 * x^2)^(1/3)
}

puntofijo(1, 10^(-6), 100)

##3-

newton <- function(x, TOL, N = 100, ecuaciones){
  # x: aproximacion inicial
  # TOL: tolerancia
  # N: cantidad maxima de iteraciones
  
  # n: numero de ecuaciones e incognitas
  n <- length(ecuaciones)
  # funciones valuadas en cero
  f0 <- rep(NA, n)
  jacobiano = matrix(rep(NA, n*n), nrow = n, ncol = n)
  
  for (max_reps in 1:N) {
    # Recorro las filas
    for (i in 1:n) {
      #Evaluo las ecuaciones 
      f0[i] <- eval(ecuaciones[i], x)
      # Recorro las columnas
      for (j in 1:n){
        # Derivo en cada variable y evaluo
        jacobiano[i,j] <- eval((D(ecuaciones[i], glue::glue("x",j))), x)
      }
    }
    
    y0 <- solve(jacobiano) %*% (-f0)
    x <- y0 + unlist(x, use.names=FALSE)
    
    norma <- norm(y0,type = 'M')
    if (norma < TOL) {
      return(x)
    }
    
    x0 <- list()
    for (i in 1:n) {
      x0[glue::glue("x",i)] <- x[i]
    }
    x <- x0
    
  }
  return("Numero de iteraciones maximo excedido")
}

newton(x = list(x1 = 0.1, x2 = 0.1, x3 = -0.1), TOL = 10^(-6),
      ecuaciones = c(
                     expression(4 * x1 - cos(x2 * x3) - 0.6),
                     expression(10 * x1^2 - 84 * (x2 + 0.1)^2 + sin(x3) + 0.73),
                     expression(exp(-x1 * x2) + 20 * x3 - 4 + (11/3) * pi)
                     ))

##4-a-

source("C:/Users/Usuario/Documents/Mariano/BD w3schools.r")

resultado4a = sqldf("
SELECT
c.CustomerName as 'Nombre cliente',
c.ContactName as 'Nombre contacto',
c.Address as 'Direccion',
c.Country as 'Pais',
c.City as 'Ciudad'
FROM customers c
LEFT JOIN orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL
")

print(resultado4a)

##b-


resultado4b = sqldf("
SELECT
e.FirstName  as 'Nombre del Vendedor',
e.LastName as 'Apellido del vendedor',
COUNT(o.EmployeeID) as 'Cantidad de Ventas',
ROUND(SUM(p.Price * od.Quantity), 2) as 'Total Vendido'
FROM employees e
INNER JOIN orders o ON e.EmployeeID = o.EmployeeID
INNER JOIN orderdetails od ON o.OrderID = od.OrderID
INNER JOIN products p ON p.ProductID = od.ProductID
INNER JOIN suppliers s ON p.SupplierID = s.SupplierID
WHERE s.Country = 'Germany'
GROUP BY e.EmployeeID
HAVING COUNT(o.EmployeeID) >8
      AND ROUND(SUM(p.Price * od.Quantity), 2) >5000
")

print(resultado4b)

##c-

resultado4c = sqldf("
SELECT
e.FirstName || ' ' || e.LastName as 'Nombre del Vendedor',
COUNT(o.EmployeeID) as 'Cantidad de Ventas',
ROUND(SUM(p.Price * od.Quantity), 2) as 'Total Vendido',
CASE WHEN COUNT(o.EmployeeID) > 30 THEN '19%'
WHEN COUNT(o.EmployeeID) > 20 THEN '10%'
WHEN COUNT(o.EmployeeID) > 15 THEN '6%'
ELSE '0%' END as 'Comision (%)'
FROM employees e
INNER JOIN orders o ON e.EmployeeID = o.EmployeeID
INNER JOIN orderdetails od ON o.OrderID = od.OrderID
INNER JOIN products p ON p.ProductID = od.ProductID
GROUP BY e.EmployeeID
ORDER BY 'Cantidad de Ventas' DESC
")

print(resultado4c)
