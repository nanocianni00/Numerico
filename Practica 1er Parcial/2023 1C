##1.1-

polinomio = function(x) { 
1000 * exp(2 * x) + (350/x) * (exp(2 * x) - 1) - 1768
}

x_values <- seq(0.001, 1, by = 0.001)  
y_values <- sapply(x_values, polinomio)  

plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
     main = "Gráfica de f(x)",
     xlab = "x", ylab = "f(x)")
abline(h = 0, col = "red", lty = 2)

##1.2-

raiz_biseccion <- function(a,b,Tol,N){
  i = 1
  FA = polinomio(a)
  while(i<=N){
    p = a + (b-a)/2
    FP = polinomio(p)
    if(FP==0 | (b-a)/2<Tol){
      return(p)
    }
    i = i+1
    if(FP*FA >0){
      a = p
      FA = FP
    } else {
      b = p
    }
  }
  return(paste("El metodo fallo luego de", N, "iteraciones"))
}

raiz_biseccion(0.001, 1, 10^(-5), 100)

##1.3-

polinomio = function(x) { 
1000 * exp(100 * x) + (350/x) * (exp(100 * x) - 1) - 800
}

raiz_biseccion(0.001, 1, 10^(-5), 100)

##1.4-

raiz_biseccion <- function(a,b,Tol,N){
  i = 1
  FA = polinomio(a)
  while(i<=N){
    p = a + (b-a)/2
    FP = polinomio(p)
print(paste("Iteración:", i, "p:", p)) 
    if(FP==0 | (b-a)/2<Tol){
      return(p)
    }
    i = i+1
    if(FP*FA >0){
      a = p
      FA = FP
    } else {
      b = p
    }
  }
  return(paste("El metodo fallo luego de", N, "iteraciones"))
}

raiz_biseccion(0.001, 1, 10^(-5), 100)

##2.2-

falsapos = function(p0,p1,TOL,N){
  i = 2
  q0 = f_falsapos(p0)
  q1 = f_falsapos(p1)
  while(i<=N){
    p = p1 - q1*(p1-p0)/(q1-q0)
    if(abs(p-p1) < TOL){
      return(p)
    }
    i = i+1
    q = f_falsapos(p)
    if(q*q1 < 0){
      p0 = p1
      q0 = q1
    }
    p1 = p
    q1 = q
  }
  return(paste("El metodo fallo luego de",N,"iteraciones"))
}

f_falsapos = function(x) {
x^2 * cos(x)
}

falsapos(1,4 * pi,10^(-5),100) #Pruebo con otros intervalos mas pequeños 

##2.3-

falsapos(4, 6,10^(-5),12)

##2.4-

x_values <- seq(1, 4 * pi, by = 0.01)  
y_values <- sapply(x_values, f_falsapos)  

plot(x_values, y_values, type = "l", col = "blue", lwd = 2,
     main = "Gráfica de f(x)",
     xlab = "x", ylab = "f(x)")
abline(h = 0, col = "red", lty = 2)  

raices_unicas <- c(1.57, 4.71, 7.85, 11)  # Ejemplo de raíces encontradas

points(raices_unicas, rep(0, length(raices_unicas)), col = c("green", "purple", "orange", "pink"), 
       pch = 19, cex = 1.5)


legend("topright", legend = paste("Raíz", 1:length(raices_unicas), ":", round(raices_unicas, 5)),
       col = c("green", "purple", "orange", "pink"), pch = 19, cex = 0.8)

##3.1-

A<-matrix(c(
2,-1,0,
-1,4,2,
0,2,2),
nrow =3, byrow=TRUE)

cholesky<-function(A){
  n<-nrow(A)
  L<-matrix(0,n,n)
  for(i in 1:n){
    L[i,i]<-sqrt(A[i,i]-sum(L[i,1:(i-1)]^2))
    if(i<n){
      for(j in (i+1):n){
        L[j,i]<-(A[j,i]-sum(L[j,1:(i-1)]*L[i,1:(i-1)]))/L[i,i]
      }
    }
    
  }
  return(L)
}
L<-cholesky(A)
print(L)

##3.2-

factorizacionLU<-function(A){
  n<-nrow(A)
  L<-diag(1,n,n)
  U<-A
  for(i in 1:(n-1)){
    if(U[i,i]==0){
      stop("Factorizacion no posible se necesita pivoteo")
    }
    for(j in (i+1):n){
      L[j,i]<-U[j,i]/U[i,i]
      U[j,]<-U[j,]-L[j,i]*U[i,]
    }
  }
  return (list(L=L,U=U))
}
result<-factorizacionLU(A)
L<-result$L
U<-result$U
print(L)
print(U)
LU<-L%*%U
print(LU)

##4-

Broyden <- function(x, TOL, N = 100, ecuaciones){
  # x: aproximación inicial
  # TOL: tolerancia
  # N: cantidad maxima de iteraciones
  
  # n: número de ecuaciones e incognitas
  n <- length(ecuaciones)
  # funciones valuadas en cero
  f0 <- rep(NA, n)
  jacobiano <- matrix(rep(NA, n*n), nrow = n, ncol = n)
  
  # Recorro las filas
  for (i in 1:n) {
    #Evaluo las ecuaciones 
    f0[i] <- eval(ecuaciones[i], x)
    # Recorro las columnas
    for (j in 1:n){
      # Derivo en cada variable y evaluo
      jacobiano[i,j] <- eval((D(ecuaciones[i], glue::glue("x",j))), x)
    }
  }
      
  # Calcula la inversa de una matriz
  A <- solve(jacobiano)
  v <- f0
  s <- -A %*% v
  
  x <- unlist(x, use.names = FALSE) + s
  
  for (max in 1:N) {
    w <- v
    
    # listo las x
    x0 <- list()
    for (i in 1:n) {
      x0[glue::glue("x",i)] <- x[i]
    }
    x <- x0
    for (i in 1:n) {
      #Evaluo las ecuaciones 
      f0[i] <- eval(ecuaciones[i], x)
    }
    v <- f0 
    
    y <- v - w
    
    z <- -A%*%y
    
    p <- -t(s) %*% z
    
    u <- t(s) %*% A
    u <- t(u)
    
    A <- A + (1/p)[1,1] * (s+z) %*% t(u)
    
    s <- -A%*%v
    x <- unlist(x, use.names = FALSE) + s
    
    norma <- norm(s,type = 'M')
    if (norma < TOL) {
      return(x)
    }
  }
  return("Numero de iteraciones maximo excedido")
}

Broyden(x = list(x1 = 0, x2 = 0, x3 = 0), TOL = 10^(-6),
        ecuaciones = c(
        expression(x1^2 + x2 - 37),
        expression(x1 - x2^2 - 5),
        expression(x1 + x2 + x3 - 3)
        ))

##5- No lo voy a hacer porque ya tengo muchos asi hechos
