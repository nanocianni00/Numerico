# Crea funciones para el polinomio de Newton y cada spline del trazador cúbico

# Polinomio de Newton (usando los coeficientes que generaste con polinomio_newton)
newton <- function(x) {
  return(1.9375 + -2.42188 * (x - -0.5) + 1.81250933333333 * (x - -0.5) * (x - -0.25) + -1.00001066666667 * (x - -0.5) * (x - 0.25))
}

# Splines del trazador cúbico (usando los coeficientes de TrazadorCubicoNatural)
spline1 <- function(x) {
  return(1.9375 + -2.63867825 * (x - -0.5)^1 + 0 * (x - -0.5)^2 + 3.468772 * (x - -0.5)^3)
}

spline2 <- function(x) {
  return(1.33203 - 1.9882835 * (x - -0.25)^1 + 2.601579 * (x - -0.25)^2 + -1.500016 * (x - -0.25)^3)
}

spline3 <- function(x) {
  return(0.800781 + -0.5117165 * (x - 0.25)^1 + 0.351555000000001 * (x - 0.25)^2 + -0.468740000000001 * (x - 0.25)^3)
}

# Define los puntos en los que quieres evaluar cada función
newtonX <- seq(-0.5, 0.5, by = 0.01)
spline1X <- seq(-0.5, -0.25, by = 0.01)
spline2X <- seq(-0.25, 0.25, by = 0.01)
spline3X <- seq(0.25, 0.5, by = 0.01)

# Calcula los valores de Y para cada tramo
newtonY <- newton(newtonX)
spline1Y <- spline1(spline1X)
spline2Y <- spline2(spline2X)
spline3Y <- spline3(spline3X)

# Crea data frames para graficar
df_newton <- data.frame(newtonX, newtonY)
df_spline1 <- data.frame(spline1X, spline1Y)
df_spline2 <- data.frame(spline2X, spline2Y)
df_spline3 <- data.frame(spline3X, spline3Y)

# Graficar utilizando ggplot2
library(ggplot2)
ggplot() +
with(df_newton, geom_line(aes(newtonX, newtonY), colour = "darkblue", lwd = 1.2)) + 
with(df_spline1, geom_line(aes(spline1X, spline1Y), colour = "red", lwd = 1.2)) +
with(df_spline2, geom_line(aes(spline2X, spline2Y), colour = "red", lwd = 1.2)) +
with(df_spline3, geom_line(aes(spline3X, spline3Y), colour = "red", lwd = 1.2)) +
geom_hline(yintercept = 0, color = "black") +  
geom_vline(xintercept = 0, color = "black") +
labs(x = "x", y = "f(x)", title = "Comparación entre Polinomio de Newton y Trazador Cúbico Natural") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

