##1-a-

Cinco_puntos_modificado <- function(x, fx){
  n <- length(x)
  
  fprima <- rep(NA, times = n)
  
  h <- x[2] - x[1]
  
  # Punto extremo progresivo
  for (i in 1:(n-4)) {
    fprima[i] <- (1/(12*h))*(-25*fx[i]+48*fx[i+1]-36*fx[i+2]+16*fx[i+3]-3*fx[i+4])
  }
  
  
  # Punto extremo regresivo
  for (i in n:5) {
    fprima[i] <- (1/(12*(-h)))*(-25*fx[i]+48*fx[i-1]-36*fx[i-2]+16*fx[i-3]-3*fx[i-4])
  }
  
  tabla <- data.frame(x, fx, fprima)
  
  return(tabla)
}

Cinco_puntos_modificado(x = c(3.05, 3.86, 4.67, 5.075, 5.48, 5.885, 6.29, 7.1, 7.91), fx = c(0.3619, -3.048, -10.0123, -5.5379, -3.4302, -1.6538, 0.0272, 2.7344, 3.6877))

#Fue posible con ese codigo, pero no seria posible de usar la regla de los extremos o del valor medio.

##b-
#No se como se hace

##c-
#Me mató con este tambien

##d-

SegundaDerivada = function (x, fx){
  n = length(x)
  
  fprima = rep(NA, times = n)
  
   h = x[2] - x[1]
  
  #Punto medio
  for (i in 2:(n-1)) {
    fprima[i] <- (1/(h^2))*(fx[i-1]-2*fx[i]+fx[i+1])
  }
  
  tabla = data.frame(x, fx, fprima)
  
  return(tabla)
  
}

SegundaDerivada(x = c(3.05, 3.86, 4.67, 5.075, 5.48, 5.885, 6.29, 7.1, 7.91), fx = c(0.3619, -3.048, -10.0123, -5.5379, -3.4302, -1.6538, 0.0272, 2.7344, 3.6877))

##2-

library (glue)

TrazadorCubicoNatural = function(x,y){
n = length(y)
if (n < 2) {
stop("Se necesitan al menos dos puntos para generar un spline.")
}
if (n == 2) {
# Caso especial para dos puntos: el spline es una recta
cat("Spline para dos puntos es una línea recta entre los puntos.\n\n")
cat(glue("S1(x) = {y[1]} + ({y[2]} - {y[1]}) / ({x[2]} - {x[1]}) * (x - {x[1]})\n"))
return()  # Termina la ejecución aquí si solo hay dos puntos
}
j = n - 1
a = y
b = c(rep(NA,n))
c = c(rep(NA,n))
d = c(rep(NA,n))
A = c(rep(0,n))
h = c(rep(0,n))
l = c(rep(0,n))
u = c(rep(0,n))
z = c(rep(0,n))
#Paso 1
for (i in 1:j) {
h[i] = x[i + 1] - x[i]
}
#Paso 2
for (i in 2:j) {
A[i] = (3 * (a[i + 1] - a[i])/(h[i])) - (3 * (a[i] - a[i - 1]) /h[i - 1])
}
#Paso 3
l[1] = 1
u[1] = 0
z[1] = 0
#Paso 4
for (i in 2:j) {
l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * u[i - 1]
u[i] = h[i]/l[i]
z[i] = (A[i] - h[i - 1] * z[i - 1])/l[i]
}
#Paso 5
l[n] = 1
z[n] = 0
c[n] = 0
#Paso 6
for (i in seq(j, 1, by = -1)) {
c[i] = z[i] - u[i] * c[i + 1]
b[i] = (a[i + 1] - a[i])/h[i] - h[i] * (c[i + 1] + 2*c[i])/3
d[i] = (c[i + 1] - c[i])/(3*h[i])
}
#Paso 7
results = matrix(rep(NA, 4 * j), nrow = j, ncol = 4, byrow = FALSE)
for (k in 1:j) {
results[k, 1] = a[k]
results[k, 2] = b[k]
results[k, 3] = c[k]
results[k, 4] = d[k]
}
#Construyo el polinomio
polinomios = rep(NA, times = j)
for (i in 1:j) {
polinomio = paste0("S", i, "(x) = ", results[i, 1])
for(k in 2:4){
polinomio = paste0(polinomio, glue(" + {results[i, k]} * (x - {x[i]})^{k - 1}"))
}
intervalo = paste0("\nIntervalo: [", x[i], "; ", x[i + 1], "]")
polinomios[i] = paste(polinomio, intervalo)
}
for (p in polinomios) {
    cat(p, "\n\n")
}
}

print(TrazadorCubicoNatural(x = c(0, 1), y = c(0, 1)))

spline1 <- function(x) {
  return(1 + (2 - 1) / (2 - 1) * (x - 1))
}

spline1X <- c(0, 1)
spline1Y <- spline1(spline1X)
df_spline1 <- data.frame(spline1X, spline1Y)
library(ggplot2)
ggplot() +
with(df_spline1, geom_line(aes(spline1X, spline1Y), colour = "red", lwd = 1.2)) + 
geom_point(data = df_spline1, aes(spline1X, spline1Y), color = "blue", size = 3) +
geom_hline(yintercept = 0, color = "black") +  
geom_vline(xintercept = 0, color = "black") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))

valor_trazador = function(x, y, x_eval){
n <- length(x)
result <- y[1]
prod <- 1
  
for (j in 2:n) {
prod <- prod * (x_eval - x[j - 1])
result <- result + y[j] * prod
}
return(result)
}

x_eval = 0.5

valor_trazador(x = c(0, 1), y = c(0, 1), x_eval)

#La respuesta tiene sentido, ya que el trazador para dos puntos es la recta que une esos dos puntos
