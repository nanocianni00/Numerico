##1-a-

diferencias_divididas = function(x, y) {
n = length(x)
column = c("x",paste("a", 0:(n-1),sep = ""))
tabla_dd = matrix(0, n, n)
tabla_dd[,1] = y
for (i in 2:n) { #Columnas
for (j in 1:(n - i + 1)) { #Filas
tabla_dd[j, i] = (tabla_dd[j + 1, i - 1] - tabla_dd[j, i - 1])/(x[j + i - 1] - x[j])
}
}
return (tabla_dd)
}


polinomio_newton = function(x, tabla_dd) {
n = length(x)
result = as.character(tabla_dd[1, 1])
for (j in 2:n) {
coef = tabla_dd[1, j]
term = paste0("+", coef)
for (k in 1:(j - 1)) {
term = paste0(term, "*(x - ", x[k], ")")
}
result = paste0(result, term)
}
return (result)
}

valor_polinomio = function(x, tabla_dd, x_eval){
n <- length(x)
result <- tabla_dd[1, 1]
prod <- 1
  
for (j in 2:n) {
prod <- prod * (x_eval - x[j - 1])
result <- result + tabla_dd[1, j] * prod
}
return(result)
}

tabla_dd = diferencias_divididas(x = c(1.5, 1.75, 2, 2.25, 2.5), y = c(0.615, 0.682, 0.765, 0.872, 1.015))
polinomio_newton(x = c(1.5, 1.75, 2, 2.25, 2.5), tabla_dd)
valor_polinomio(x = c(1.5, 1.75, 2, 2.25, 2.5), tabla_dd, 2.1)
valor_polinomio(x = c(1.5, 1.75, 2, 2.25, 2.5), tabla_dd, 2.25)
valor_polinomio(x = c(1.5, 1.75, 2, 2.25, 2.5), tabla_dd, 2.6)

##b- 

n_simpson = function(a, b, max_f4, error) {
n <- ceiling(((b - a)^5 * max_f4 / (180 * error))^(1/4))
if (n %% 2 != 0) {
n <- n + 1  # Asegurarse de que n es par
}
return(n)
}

n_simpson(0.5, 2.5, 3.556, 0.001)

IntegracionCompuestaDiscreta <- function(x, y, n, cantIntervalos) {
  # Verificar que los vectores x e y tengan la misma longitud
  if (length(x) != length(y)) {
    stop("Los vectores x e y deben tener la misma longitud.")
  }
  
  # Asegurarse de que la cantidad de intervalos sea menor o igual al total de intervalos disponibles
  if (cantIntervalos > length(x) - 1) {
    stop("La cantidad de intervalos es mayor que el número de puntos disponibles.")
  }
  
  # Determinar el paso para reducir los puntos según la cantidad de intervalos deseada
  step <- floor((length(x) - 1) / cantIntervalos)
  
  # Seleccionar los puntos y valores correspondientes a los intervalos deseados
  x <- x[seq(1, length(x), by = step)]
  y <- y[seq(1, length(y), by = step)]
  
  # Recalcular el número de intervalos y el tamaño de paso h
  cantIntervalos <- length(x) - 1
  h <- (x[length(x)] - x[1]) / cantIntervalos
  
  # Verificar si n es adecuado para el número de intervalos
  if (n == 2 && cantIntervalos %% 2 != 0) {
    stop("El número de intervalos debe ser par para el método de Simpson.")
  }
  
  # Inicializar el resultado
  resultado <- 0
  
  # Aplicar la fórmula compuesta según el método
  if (n == 1) {
    # Método del trapecio compuesto
    resultado <- (h / 2) * (y[1] + 2 * sum(y[2:cantIntervalos]) + y[length(y)])
  } else if (n == 2) {
    # Método de Simpson compuesto
    resultado <- (h / 3) * (y[1] + 4 * sum(y[seq(2, cantIntervalos, by = 2)]) + 2 * sum(y[seq(3, cantIntervalos - 1, by = 2)]) + y[length(y)])
  }
  
  return(resultado)
}

IntegracionCompuestaDiscreta(x = seq(0.5, 2.5, by = 0.25), y = c(0.857, 0.923, 1, 1.091, 1.2, 1.333, 1.5, 1.714, 2), n = 2, cantIntervalos = 6)

##2- a-

simpson_compuesto <- function(limiteInferior, limiteSuperior, funcion, n) {
  h <- (limiteSuperior - limiteInferior) / n
  suma <- 0
  for (i in 1:(n/2)) {
    xi <- limiteInferior + (2*i - 2)*h
    xi_1 <- limiteInferior + (2*i - 1)*h
    xi_2 <- limiteInferior + 2*i*h
    
    fx0 <- eval(funcion, list(x = xi))
    fx1 <- eval(funcion, list(x = xi_1))
    fx2 <- eval(funcion, list(x = xi_2))
    
    suma <- suma + (h / 3) * (fx0 + 4 * fx1 + fx2)
  }
  return(suma)
}

simpson_compuesto(limiteInferior = -100, limiteSuperior = 0, funcion = expression(1/(sqrt(2 * pi)) * exp(- (x^2)/2)), n = 1000) #Pongo limite superior 0 en vez de 100 porque me pide probabilidad de que x<0

##b- 

esperanza = simpson_compuesto(limiteInferior = -100, limiteSuperior = 100, funcion = expression(x * (1/(sqrt(2 * pi)) * exp(- (x^2)/2))), n = 1000) #Integral de x * f(x) es la forma de calcular la esperanza
print(esperanza)

##3-a-

