####1-a

newtonCotesCerradas <- function(limiteInferior, limiteSuperior, funcion, n){
  h <- (limiteSuperior - limiteInferior)/n
  
  fx <- rep(NA, times = (n+1))
  for (i in 1:(n+1)) {
    fx[i] <- eval(funcion, list(x = limiteInferior + (i-1)*h))
  }
  
  if (n == 1){
    return((h/2) * (fx[1] + fx[2]))
  }
  else if (n == 2){
    return((h/3) * (fx[1] + 4*fx[2] + fx[3]))
  }
  else if(n == 3){
    return((3/8)*h*(fx[1] + 3*fx[2] + 3*fx[3] + fx[4]))
  }
  else if(n == 4){
    return((2/45) * h * ( 7 * fx[1] + 32 * fx[2] + 12 * fx[3] + 32 * fx[4] + 7 * fx[5]))
  }
  
}

f = function(x, mu, sigma){
return(1 / (x * sigma * sqrt(2 * pi)) * exp(-((log(x) - mu)^2) / (2 * sigma^2)))
}

newtonCotesCerradas(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2))), n = 1)
newtonCotesCerradas(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2))), n = 2)
newtonCotesCerradas(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2))), n = 3)

##b-

simpson_compuesto <- function(limiteInferior, limiteSuperior, funcion, n) {
  h <- (limiteSuperior - limiteInferior) / n
  suma <- 0
  for (i in 1:(n/2)) {
    xi <- limiteInferior + (2*i - 2)*h
    xi_1 <- limiteInferior + (2*i - 1)*h
    xi_2 <- limiteInferior + 2*i*h
    
    fx0 <- eval(funcion, list(x = xi))
    fx1 <- eval(funcion, list(x = xi_1))
    fx2 <- eval(funcion, list(x = xi_2))
    
    suma <- suma + (h / 3) * (fx0 + 4 * fx1 + fx2)
  }
  return(suma)
}

simpson_compuesto(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2))), n = 1000)

##c-

trapecioCompuesto <- function(limiteInferior, limiteSuperior, funcion, n) {
  h <- (limiteSuperior - limiteInferior) / n
  x <- seq(limiteInferior, limiteSuperior, by = h)  # Puntos en el intervalo
  fx <- sapply(x, funcion)  # Evalúa la función en cada punto
  
  integral <- (h / 2) * (fx[1] + 2 * sum(fx[2:n]) + fx[n + 1])
  
  return(integral)
}

trapecioCompuesto(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2))), n = 1000)

##d-

simpson_compuesto(limiteInferior = 12.68, limiteSuperior = 20.42, funcion = expression(max(1 / (x * (0.22*sqrt(0.75)) * sqrt(2 * pi)) * exp(-((log(x) - 2.77)^2) / (2 * (0.22*sqrt(0.75))^2)) - 40, 0)), n = 1000)
