##a-

newton <- function(x, TOL, N = 100, ecuaciones){
  # x: aproximacion inicial
  # TOL: tolerancia
  # N: cantidad maxima de iteraciones
  
  # n: numero de ecuaciones e incognitas
  n <- length(ecuaciones)
  # funciones valuadas en cero
  f0 <- rep(NA, n)
  jacobiano = matrix(rep(NA, n*n), nrow = n, ncol = n)
  
  for (max_reps in 1:N) {
    # Recorro las filas
    for (i in 1:n) {
      #Evaluo las ecuaciones 
      f0[i] <- eval(ecuaciones[i], x)
      # Recorro las columnas
      for (j in 1:n){
        # Derivo en cada variable y evaluo
        jacobiano[i,j] <- eval((D(ecuaciones[i], glue::glue("x",j))), x)
      }
    }
    
    y0 <- solve(jacobiano) %*% (-f0)
    x <- y0 + unlist(x, use.names=FALSE)
    
    norma <- norm(y0,type = 'M')
    if (norma < TOL) {
      return(x)
    }
    
    x0 <- list()
    for (i in 1:n) {
      x0[glue::glue("x",i)] <- x[i]
    }
    x <- x0
    
  }
  return("Numero de iteraciones maximo excedido")
}

newton(x = list(x1 = 0.1, x2 = 0.1), TOL = 10^(-5), 
       ecuaciones = c(
                      expression(3*x1^2-x2^2),
                      expression(3*x1*x2^2-x1^3-1)
                      ))

##b-

newton(x = list(x1 = 0.1, x2 = 0.1, x3 = -0.1), TOL = 10^(-5),
      ecuaciones = c(
                     expression(3 * x1 - cos(x2 * x3) - 0.5),
                     expression(4 * x1^2 - 625 * x2^2 + 2 * x2 - 1),
                     expression(20 * x3 + (10 * pi - 3)/3 + exp(-x1 * x2))
                     ))

##c-

newton(x = list(x1 = 0.1, x2 = 0.1, x3 = -0.1), TOL = 10^(-5),
      ecuaciones = c(
                     expression(x1^3 + x1^2 * x2 - x1 * x3 + 6),
                     expression(exp(x1) + exp(x2) - x3),
                     expression(x2^2 - 2 * x1 * x3)
                     ))

##e-

newton(x = list(x1 = 0.1, x2 = 0.1), TOL = 10^(-5), 
       ecuaciones = c(
                      expression(log(x1^2 + x2^2) - sin(x1 * x2) - log(2)),
                      expression(exp(x1 - x2) + cos(x1 * x2))
                      ))
