#biseccion
raiz_biseccion <- function(a,b,Tol,N){
  i <- 1
  FA <- Polinomio(a)
  while(i<=N){
    p <- a + (b-a)/2
    FP <- Polinomio(p)
    if(FP==0 | (b-a)/2<Tol){
      return(p)
    }
    i <- i+1
    if(FP*FA >0){
      a <- p
      FA <- FP
    } else {
      b <- p
    }
  }
  return(paste("El metodo fallo luego de", N, "iteraciones"))
}

Polinomio<-function(x){
  devolver<-x-2^(-x)
  return (devolver)
}

# COTA BISEECION
## en cuantos pasos llego al nivel de tolerancia requerido y cuales son esos valores

cota_biseccion <- function(a, b, tol, N) {
  li <- list()
  i <- 1
  FA <- polinomio(a)
  while (i <= N) {
    p <- a + (b-a)/2
    FP <- polinomio(p)
    li <- append(li,p)
    cat("Iteración", i, "- p =", p, "\n")
    if (FP == 0 || (b-a)/2<tol) {
      return(paste("El método converge a",p,"después de",i,"iteraciones."))
    }
    i <- i+1
    if (FP*FA > 0){
      a <- p
      FA <- FP
    } else {
      b <- p
    }
  }
  return(paste('El método falló luego de ', N, ' iteraciones.'))
}


#Punto fijo 
##siempre se despeja la x de mayor grado
puntofijo = function(p0, Tol,N){
  i=1
  while(i<= N){
    p= Polinomio(p0)
    if(abs(p-p0) < Tol){
      return(p)
    }
    i= i+1
    p0=p
  }
  return(paste("El metodo fallo luego de ", N, "iteraciones "))
}

Polinomio_newton <- function(x){
  f <- -x^3-cos(x)
  return(f)
}

#CALCULAR LA DERIVADA
df <- D(expression(-x^3-cos(x)),"x")
df

dfnewton <- function(x){
  df <- -(3 * x^2 - sin(x))
  return(df)
}

newton_raphson <- function(p0, TOL,N){
  i <- 1
  while(i<=N){
    x <- p0
    p <- p0- Polinomio_newton(p0)/dfnewton(p0)
    print(p)
    if(abs(p-p0)<TOL){
      return(p)
    }
    i <- i+1
    p0 <- p
  }
  return(paste("El metodo fallo luego de", N,"iteraciones"))
}

# secante y falsa posicion
secante <- function(p0,p1,TOL,N){
  i <- 2
  q0 <- f_secante(p0)
  q1 <- f_secante(p1)
  while(i<=N){
    p <- p1 - q1*(p1-p0)/(q1-q0)
    if(abs(p-p1)<TOL){
      return(p)
    }
    i <- i+1
    p0 <- p1
    q0 <- q1
    p1 <- p
    q1 <- f_secante(p)
  }
  return(paste("El metodo fallo luego de",N,"iteraciones",p))
}

f_secante <- function(x){
  f <- x^2-6                       
  return(f)
}

falsapos <- function(p0,p1,TOL,N){
  i <- 2
  q0 <- f_falsapos(p0)
  q1 <- f_falsapos(p1)
  while(i<=N){
    p <- p1 - q1*(p1-p0)/(q1-q0)
    if(abs(p-p1) < TOL){
      return(p)
    }
    i <- i+1
    q <- f_falsapos(p)
    if(q*q1 < 0){
      p0 <- p1
      q0 <- q1
    }
    p1 <- p
    q1 <- q
  }
  return(paste("El metodo fallo luego de",N,"iteraciones"))
}

f_falsapos <- function(x){
  f <- x^2-6                     
}
